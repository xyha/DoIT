<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- 定义日志文件的存储地址 -->
	<property name="LOG_DIR" value="E:\\nywb\\Log\\resilience4j" />
	<!-- 定义日志文件名称 -->
	<property name="LOG_INFO_FILE" value="info"></property>
	
	<!--格式化输出-->
	<!--
        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
        %t:输出产生该日志事件的线程名
        %f:输出日志讯息所属的类别的类别名
        %c:输出日志讯息所属的类的全名
        %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
        %m:输出代码中指定的讯息，如log(message)中的message
        %n:输出一个换行符号
    -->
	<property name="pattern" value="%d [%t] %-5p %c - %m%n"/>
	
	<!--
        Appender: 设置日志信息的去向,常用的有以下几个：
            ch.qos.logback.core.ConsoleAppender (控制台)
            ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
            ch.qos.logback.core.FileAppender (文件)
    -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    	<target>System.out</target>
    	<!-- 对记录事件进行格式化 -->
    	<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
    		<pattern>${pattern}</pattern>
    	</encoder>
	</appender>
	
	<!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出 -->
	<appender name="LOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
		<File>${LOG_DIR}/${LOG_INFO_FILE}.log</File>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${pattern}</pattern>
			<charset>UTF-8</charset>  <!--解决中文乱码问题-->
		</encoder>
		<!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd -->
			<FileNamePattern>${LOG_DIR}/${LOG_INFO_FILE}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6个月的文件，删除之前的旧文件 -->
			<MaxHistory>10</MaxHistory>
	 		<!-- 
		               当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
		               注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
		               必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
			<TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<MaxFileSize>50MB</MaxFileSize>
			</TimeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 用于配置符合过滤条件的操作 ACCEPT：日志会被立即处理，不再经过剩余过滤器 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 DENY：日志将立即被抛弃不再经过其他过滤器 -->
            <onMismatch>DENY</onMismatch>
        </filter>
	</appender>
	
	<!--
       	用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
       	<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
       	name:
        	用来指定受此logger约束的某一个包或者具体的某一个类。
       	level:
           	用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
          	如果未设置此属性，那么当前logger将会继承上级的级别。
       	additivity:
           	是否向上级loger传递打印信息。默认是true。
       	<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
	<logger name="java.sql" level="info" additivity="false">
		<appender-ref ref="CONSOLE" />
        <appender-ref ref="LOGFILE" />
	</logger>
	
	<!-- 
        root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
       	要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
       	root也是<logger>元素，但是它是根logger。默认debug
    --> 
    <root>
    	<!-- 可以同时设置多个级别 -->
    	<level value="info" />
    	<appender-ref ref="CONSOLE" />
        <!-- <appender-ref ref="LOGFILE" /> -->
    </root>
</configuration>